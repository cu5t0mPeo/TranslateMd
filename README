```golang
// ContractABI 表示一个完整的合约ABI
type ContractABI struct {
	Methods   map[string]ABIMethod   `json:"methods"`
	Events    map[string]ABIEvent    `json:"events"`
	Errors    map[string]ABIError    `json:"errors"`
	Functions []ABIFunction          `json:"-"` // 用于存储所有函数
	Raw       string                 `json:"-"` // 原始ABI字符串
	Address   common.Address         `json:"address,omitempty"`
}

// ABIMethod 表示ABI中的一个方法
type ABIMethod struct {
	Name            string        `json:"name"`
	Type            string        `json:"type"`
	StateMutability string        `json:"stateMutability,omitempty"`
	Inputs          []ABIParam    `json:"inputs"`
	Outputs         []ABIParam    `json:"outputs"`
	Signature       string        `json:"signature"`
	SigHash         string        `json:"sighash"`
}

// ABIEvent 表示ABI中的一个事件
type ABIEvent struct {
	Name      string     `json:"name"`
	Type      string     `json:"type"`
	Inputs    []ABIParam `json:"inputs"`
	Anonymous bool       `json:"anonymous"`
	Signature string     `json:"signature"`
	Topic     string     `json:"topic"`
}

// ABIError 表示ABI中的一个错误
type ABIError struct {
	Name      string     `json:"name"`
	Type      string     `json:"type"`
	Inputs    []ABIParam `json:"inputs"`
	Signature string     `json:"signature"`
}

// ABIFunction 是ABIMethod的别名，用于表示函数
type ABIFunction ABIMethod

// ABIParam 表示ABI中的参数
type ABIParam struct {
	Name       string      `json:"name"`
	Type       string      `json:"type"`
	Components []ABIParam  `json:"components,omitempty"`
	Indexed    bool        `json:"indexed,omitempty"`
}

// ParseABI 将ABI字符串解析为ContractABI结构体
func ParseABI(abiStr string) (*ContractABI, error) {
	var rawItems []map[string]interface{}
	if err := json.Unmarshal([]byte(abiStr), &rawItems); err != nil {
		return nil, fmt.Errorf("解析ABI失败: %v", err)
	}

	contractABI := &ContractABI{
		Methods:   make(map[string]ABIMethod),
		Events:    make(map[string]ABIEvent),
		Errors:    make(map[string]ABIError),
		Functions: []ABIFunction{},
		Raw:       abiStr,
	}

	// 解析每个ABI项
	for _, item := range rawItems {
		itemType, ok := item["type"].(string)
		if !ok {
			continue
		}

		switch itemType {
		case "function", "constructor", "fallback", "receive":
			method, err := parseABIMethod(item)
			if err != nil {
				return nil, err
			}
			
			if method.Name != "" { // 构造函数、fallback和receive可能没有名称
				contractABI.Methods[method.Name] = method
				contractABI.Functions = append(contractABI.Functions, ABIFunction(method))
			}
		case "event":
			event, err := parseABIEvent(item)
			if err != nil {
				return nil, err
			}
			contractABI.Events[event.Name] = event
		case "error":
			abiError, err := parseABIError(item)
			if err != nil {
				return nil, err
			}
			contractABI.Errors[abiError.Name] = abiError
		}
	}

	return contractABI, nil
}

// 解析ABI方法
func parseABIMethod(item map[string]interface{}) (ABIMethod, error) {
	method := ABIMethod{
		Type: item["type"].(string),
	}

	// 设置名称（如果有）
	if name, ok := item["name"].(string); ok {
		method.Name = name
	}

	// 设置状态可变性（如果有）
	if stateMutability, ok := item["stateMutability"].(string); ok {
		method.StateMutability = stateMutability
	}

	// 解析输入参数
	if inputs, ok := item["inputs"].([]interface{}); ok {
		for _, input := range inputs {
			param, err := parseABIParam(input.(map[string]interface{}))
			if err != nil {
				return method, err
			}
			method.Inputs = append(method.Inputs, param)
		}
	}

	// 解析输出参数
	if outputs, ok := item["outputs"].([]interface{}); ok {
		for _, output := range outputs {
			param, err := parseABIParam(output.(map[string]interface{}))
			if err != nil {
				return method, err
			}
			method.Outputs = append(method.Outputs, param)
		}
	}

	// 计算函数签名和签名哈希
	if method.Name != "" {
		method.Signature = calculateMethodSignature(method)
		method.SigHash = calculateMethodSigHash(method.Signature)
	}

	return method, nil
}

// 解析ABI事件
func parseABIEvent(item map[string]interface{}) (ABIEvent, error) {
	event := ABIEvent{
		Type: "event",
		Name: item["name"].(string),
	}

	// 设置匿名属性
	if anonymous, ok := item["anonymous"].(bool); ok {
		event.Anonymous = anonymous
	}

	// 解析输入参数
	if inputs, ok := item["inputs"].([]interface{}); ok {
		for _, input := range inputs {
			param, err := parseABIParam(input.(map[string]interface{}))
			if err != nil {
				return event, err
			}
			event.Inputs = append(event.Inputs, param)
		}
	}

	// 计算事件签名和主题
	event.Signature = calculateEventSignature(event)
	event.Topic = calculateEventTopic(event.Signature)

	return event, nil
}

// 解析ABI错误
func parseABIError(item map[string]interface{}) (ABIError, error) {
	abiError := ABIError{
		Type: "error",
		Name: item["name"].(string),
	}

	// 解析输入参数
	if inputs, ok := item["inputs"].([]interface{}); ok {
		for _, input := range inputs {
			param, err := parseABIParam(input.(map[string]interface{}))
			if err != nil {
				return abiError, err
			}
			abiError.Inputs = append(abiError.Inputs, param)
		}
	}

	// 计算错误签名
	abiError.Signature = calculateErrorSignature(abiError)

	return abiError, nil
}

// 解析ABI参数
func parseABIParam(item map[string]interface{}) (ABIParam, error) {
	param := ABIParam{}

	// 设置名称
	if name, ok := item["name"].(string); ok {
		param.Name = name
	}

	// 设置类型
	if paramType, ok := item["type"].(string); ok {
		param.Type = paramType
	} else {
		return param, fmt.Errorf("参数缺少类型")
	}

	// 设置indexed属性（事件参数）
	if indexed, ok := item["indexed"].(bool); ok {
		param.Indexed = indexed
	}

	// 解析组件（复杂类型）
	if components, ok := item["components"].([]interface{}); ok {
		for _, component := range components {
			comp, err := parseABIParam(component.(map[string]interface{}))
			if err != nil {
				return param, err
			}
			param.Components = append(param.Components, comp)
		}
	}

	return param, nil
}

// 计算方法签名
func calculateMethodSignature(method ABIMethod) string {
	var paramTypes []string
	for _, param := range method.Inputs {
		paramTypes = append(paramTypes, param.Type)
	}
	return fmt.Sprintf("%s(%s)", method.Name, strings.Join(paramTypes, ","))
}

// 计算方法签名哈希（函数选择器）
func calculateMethodSigHash(signature string) string {
	hash := crypto.Keccak256([]byte(signature))
	return common.Bytes2Hex(hash[:4])
}

// 计算事件签名
func calculateEventSignature(event ABIEvent) string {
	var paramTypes []string
	for _, param := range event.Inputs {
		paramTypes = append(paramTypes, param.Type)
	}
	return fmt.Sprintf("%s(%s)", event.Name, strings.Join(paramTypes, ","))
}

// 计算事件主题
func calculateEventTopic(signature string) string {
	hash := crypto.Keccak256([]byte(signature))
	return common.Bytes2Hex(hash)
}

// 计算错误签名
func calculateErrorSignature(abiError ABIError) string {
	var paramTypes []string
	for _, param := range abiError.Inputs {
		paramTypes = append(paramTypes, param.Type)
	}
	return fmt.Sprintf("%s(%s)", abiError.Name, strings.Join(paramTypes, ","))
}

// SaveContractABI 将ContractABI保存到文件
func SaveContractABI(contractABI *ContractABI, filePath string) error {
	data, err := json.MarshalIndent(contractABI, "", "  ")
	if err != nil {
		return fmt.Errorf("序列化ABI失败: %v", err)
	}

	return ioutil.WriteFile(filePath, data, 0644)
}

// LoadContractABI 从文件加载ContractABI
func LoadContractABI(filePath string) (*ContractABI, error) {
	data, err := ioutil.ReadFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("读取ABI文件失败: %v", err)
	}

	var contractABI ContractABI
	if err := json.Unmarshal(data, &contractABI); err != nil {
		return nil, fmt.Errorf("解析ABI文件失败: %v", err)
	}

	return &contractABI, nil
}
```
